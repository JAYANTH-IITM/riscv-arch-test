
// -----------
// This file was generated by riscv_ctg (https://github.com/riscv-software-src/riscv-ctg)
// version   : 0.12.2
// timestamp : Wed Oct 23 06:59:34 2024 GMT
// usage     : riscv_ctg \
//                  -- cgf //                  --cgf /home/saravana/riscv-arch-test/coverage/dataset.cgf \
//                  --cgf /home/saravana/riscv-arch-test/coverage/zcmp/cm.mva01s.cgf \
 \
//                  -- xlen 32  \
//                  --randomize \
// -----------
//
// -----------
// Copyright (c) 2020. RISC-V International. All rights reserved.
// SPDX-License-Identifier: BSD-3-Clause
// -----------
//
// This assembly file tests the cm.mva01s instruction of the RISC-V RV32_Zca_Zcmp extension for the cm.mva01s covergroup.
// 
#include "model_test.h"
#include "arch_test.h"
RVTEST_ISA("RV32I_Zca_Zcmp")

.section .text.init
.globl rvtest_entry_point
rvtest_entry_point:
RVMODEL_BOOT
RVTEST_CODE_BEGIN

#ifdef TEST_CASE_1

RVTEST_CASE(0,"//check ISA:=regex(.*I.*Zca.*Zcmp.*);def TEST_CASE_1=True;",cm.mva01s)

RVTEST_SIGBASE(x1,signature_x1_1)

inst_0:
// rs1==s6, rs2==s4, rd==a1, 
// opcode: cm.mva01s ; op1:s6 ;  op2:s4 ;  dest:a1 ;
TEST_MVAS(cm.mva01s,s6,s4,a1)

inst_1:
// rs1==s0, rs2==s1, rd==a0, 
// opcode: cm.mva01s ; op1:s0 ;  op2:s1 ;  dest:a0 ;
TEST_MVAS(cm.mva01s,s0,s1,a0)

inst_2:
// rs1==s5, rs2==s2, 
// opcode: cm.mva01s ; op1:s5 ;  op2:s2 ;  dest:a0 ;
TEST_MVAS(cm.mva01s,s5,s2,a0)

inst_3:
// rs1==s1, rs2==s0, 
// opcode: cm.mva01s ; op1:s1 ;  op2:s0 ;  dest:a0 ;
TEST_MVAS(cm.mva01s,s1,s0,a0)

inst_4:
// rs1==s7, rs2==s6, 
// opcode: cm.mva01s ; op1:s7 ;  op2:s6 ;  dest:a1 ;
TEST_MVAS(cm.mva01s,s7,s6,a1)

inst_5:
// rs1==s2, rs2==s7, 
// opcode: cm.mva01s ; op1:s2 ;  op2:s7 ;  dest:a1 ;
TEST_MVAS(cm.mva01s,s2,s7,a1)

inst_6:
// rs1==s4, rs2==s3, 
// opcode: cm.mva01s ; op1:s4 ;  op2:s3 ;  dest:a1 ;
TEST_MVAS(cm.mva01s,s4,s3,a1)

inst_7:
// rs1==s3, rs2==s5, 
// opcode: cm.mva01s ; op1:s3 ;  op2:s5 ;  dest:a1 ;
TEST_MVAS(cm.mva01s,s3,s5,a1)
#endif


RVTEST_CODE_END
RVMODEL_HALT

RVTEST_DATA_BEGIN
.align 4
rvtest_data:
.word 0xbabecafe
.word 0xabecafeb
.word 0xbecafeba
.word 0xecafebab
RVTEST_DATA_END

RVMODEL_DATA_BEGIN
rvtest_sig_begin:
sig_begin_canary:
CANARY;



signature_x1_0:
    .fill 0*((XLEN/8)/4),4,0xdeadbeef


signature_x1_1:
    .fill 8*((XLEN/8)/4),4,0xdeadbeef

#ifdef rvtest_mtrap_routine
tsig_begin_canary:
CANARY;

mtrap_sigptr:
    .fill 64*XLEN/32,4,0xdeadbeef

tsig_end_canary:
CANARY;
#endif

#ifdef rvtest_gpr_save

gpr_save:
    .fill 32*XLEN/32,4,0xdeadbeef

#endif


sig_end_canary:
CANARY;
rvtest_sig_end:
RVMODEL_DATA_END
